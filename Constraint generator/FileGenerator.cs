using System;
using System.IO;
using System.Windows.Forms;

namespace Constraint_generator
{
    class FileGenerator
    {
        StreamWriter writer;
        private readonly string[] bulkHeaders = { "Switches", "LEDs", "Seven segment", "Buttons", "PMOD A", "PMOD B", "PMOD C", "PMOD X" };
        //open and close the file
        public void OpenFile(Stream stream, string filename)
        {
            writer = new StreamWriter(stream);

            writer.WriteLine("## Constraint file " + Path.GetFileName(filename) + " for BASYS3 FPGA board.");
            writer.WriteLine("## Auto-generated by Constraint Generator on " + DateTime.Now + "\n");
        }

        public void CloseFile()
        {
            writer.WriteLine("## End file");

            writer.Close();
        }

        public void GenerateClk(CheckBox enable, TextBox name, TextBox period, TextBox wave1, TextBox wave2)
        {
            writer.WriteLine("## Clock");
            
            if(enable.Checked)
            {
                //precheck
                if (string.IsNullOrWhiteSpace(name.Text))
                    throw new EmptyArgumentException("Clock");
                if (!double.TryParse(period.Text, out double p) || !int.TryParse(wave1.Text, out int w1) || !int.TryParse(wave2.Text, out int w2))
                    throw new InvalidArgumentException("Clock");

                //write to file
                writer.WriteLine(string.Format("set_property PACKAGE_PIN {0} [get_ports {1}]", FPGAPortNames.clk, name.Text));
                writer.WriteLine(string.Format("\tset_property IOSTANDARD LVCMOS33 [get_ports {0}]", name.Text));
                writer.WriteLine(string.Format("\tcreate_clock -add -name sys_clk_pin -period {0} -waveform {{{1} {2}}} [get_ports {3}]", period.Text, wave1.Text, wave2.Text, name.Text));
            }

            writer.WriteLine("\n");
        }

        public void GenerateVga(CheckBox enable, TextBox red, TextBox green, TextBox blue, TextBox hSync, TextBox vSync)
        {
            writer.WriteLine("## VGA");

            if (enable.Checked)
            {
                //precheck
                if (string.IsNullOrWhiteSpace(red.Text) || string.IsNullOrWhiteSpace(green.Text) || string.IsNullOrWhiteSpace(blue.Text) ||
                    string.IsNullOrWhiteSpace(hSync.Text) || string.IsNullOrWhiteSpace(vSync.Text))
                    throw new EmptyArgumentException("VGA");

                //write to file

                //red
                for (int i = 0; i < 3; i++)
                {
                    writer.WriteLine(string.Format("set_property PACKAGE_PIN {0} [get_ports {{{1}[{2}]}}]", FPGAPortNames.vga[i], red.Text, i));
                    writer.WriteLine(string.Format("\tset_property IOSTANDARD LVCMOS33 [get_ports {{{0}[{1}]}}]", red.Text, i));
                }
                //blue
                for (int i = 0; i < 3; i++)
                {
                    writer.WriteLine(string.Format("set_property PACKAGE_PIN {0} [get_ports {{{1}[{2}]}}]", FPGAPortNames.vga[i] + 3, blue.Text, i));
                    writer.WriteLine(string.Format("\tset_property IOSTANDARD LVCMOS33 [get_ports {{{0}[{1}]}}]", blue.Text, i));
                }
                //green
                for (int i = 0; i < 3; i++)
                {
                    writer.WriteLine(string.Format("set_property PACKAGE_PIN {0} [get_ports {{{1}[{2}]}}]", FPGAPortNames.vga[i] + 6, green.Text, i));
                    writer.WriteLine(string.Format("\tset_property IOSTANDARD LVCMOS33 [get_ports {{{0}[{1}]}}]", green.Text, i));
                }

                //HSync and VSync
                writer.WriteLine(string.Format("set_property PACKAGE_PIN {0} [get_ports {1}]", FPGAPortNames.vga[9], hSync.Text));
                writer.WriteLine(string.Format("\tset_property IOSTANDARD LVCMOS33 [get_ports {0}]", hSync.Text));
                writer.WriteLine(string.Format("set_property PACKAGE_PIN {0} [get_ports {1}]", FPGAPortNames.vga[10], vSync.Text));
                writer.WriteLine(string.Format("\tset_property IOSTANDARD LVCMOS33 [get_ports {0}]", vSync.Text));
            }

            writer.WriteLine("\n");
        }

        public void GenerateSerial(CheckBox enable, TextBox rx, TextBox tx)
        {
            writer.WriteLine("## USB RS-232");

            if (enable.Checked)
            {
                //precheck
                if (string.IsNullOrWhiteSpace(rx.Text) || string.IsNullOrWhiteSpace(tx.Text))
                    throw new EmptyArgumentException("USB RS-232");

                //write to file
                writer.WriteLine(string.Format("set_property PACKAGE_PIN {0} [get_ports {1}]", FPGAPortNames.serial[0], rx.Text));
                writer.WriteLine(string.Format("\tset_property IOSTANDARD LVCMOS33 [get_ports {0}]", rx.Text));
                writer.WriteLine(string.Format("set_property PACKAGE_PIN {0} [get_ports {1}]", FPGAPortNames.serial[1], tx.Text));
                writer.WriteLine(string.Format("\tset_property IOSTANDARD LVCMOS33 [get_ports {0}]", tx.Text));
            }

            writer.WriteLine("\n");
        }

        public void GenerateHid(CheckBox enable, TextBox clk, TextBox data)
        {
            writer.WriteLine("## USB PS/2 (HID)");

            if (enable.Checked)
            {
                //precheck
                if (string.IsNullOrWhiteSpace(clk.Text) || string.IsNullOrWhiteSpace(data.Text))
                    throw new EmptyArgumentException("USB PS/2");

                //write to file
                writer.WriteLine(string.Format("set_property PACKAGE_PIN {0} [get_ports {1}]", FPGAPortNames.hid[0], clk.Text));
                writer.WriteLine(string.Format("\tset_property IOSTANDARD LVCMOS33 [get_ports {0}]", clk.Text));
                writer.WriteLine(string.Format("\tset_property PULLUP true [get_ports {0}]", clk.Text));
                writer.WriteLine(string.Format("set_property PACKAGE_PIN {0} [get_ports {1}]", FPGAPortNames.hid[1], data.Text));
                writer.WriteLine(string.Format("\tset_property IOSTANDARD LVCMOS33 [get_ports {0}]", data.Text));
                writer.WriteLine(string.Format("\tset_property PULLUP true [get_ports {0}]", data.Text));
            }

            writer.WriteLine("\n");
        }

        public void GenerateSpi(CheckBox enable, TextBox bus, TextBox cs)
        {
            writer.WriteLine("## Quad SPI");

            if (enable.Checked)
            {
                //precheck
                if (string.IsNullOrWhiteSpace(bus.Text) || string.IsNullOrWhiteSpace(cs.Text))
                    throw new EmptyArgumentException("SPI");

                //write to file

                //bus
                for (int i = 0; i < 4; i++)
                {
                    writer.WriteLine(string.Format("set_property PACKAGE_PIN {0} [get_ports {{{1}[{2}]}}]", FPGAPortNames.spi[i], bus.Text, i));
                    writer.WriteLine(string.Format("\tset_property IOSTANDARD LVCMOS33 [get_ports {{{0}[{1}]}}]", bus.Text, i));
                }

                //CS
                writer.WriteLine(string.Format("set_property PACKAGE_PIN {0} [get_ports {1}]", FPGAPortNames.spi[4], cs.Text));
                writer.WriteLine(string.Format("\tset_property IOSTANDARD LVCMOS33 [get_ports {0}]", cs.Text));
            }

            writer.WriteLine("\n");
        }


        public void GenerateBulk(int type, CheckBox[] enable, CheckBox[] bus, TextBox[] name, TextBox[] busAddr)
        {
            string portConstant;

            //header
            writer.WriteLine("## {0}", bulkHeaders[type]);

            for (int idx = 0; idx < enable.Length; idx++)
            {
                int i;
                //fix the fact that controls are sorted in inversed to the way it should work.
                if (type > 2) i = enable.Length - idx - 1;
                else i = idx;

                //precheck
                if (enable[i].Checked && string.IsNullOrWhiteSpace(name[i].Text))
                    throw new EmptyArgumentException(bulkHeaders[type] + " name");
                if (bus[i].Checked && string.IsNullOrWhiteSpace(busAddr[i].Text))
                    throw new EmptyArgumentException(bulkHeaders[type] + " bus");

                //write to file

                //skip disabled ports
                if (!enable[i].Checked) continue;

                //get port name
                portConstant = DeterminePortName(type, idx);

                //separate cases, bus vs. no bus use different syntax
                if (bus[i].Checked)
                {
                    writer.WriteLine(string.Format("set_property PACKAGE_PIN {0} [get_ports {{{1}[{2}]}}]", portConstant, name[i].Text, busAddr[i].Text));
                    writer.WriteLine(string.Format("\tset_property IOSTANDARD LVCMOS33 [get_ports {{{0}[{1}]}}]", name[i].Text, busAddr[i].Text));
                }
                else
                {
                    writer.WriteLine(string.Format("set_property PACKAGE_PIN {0} [get_ports {1}]", portConstant, name[i].Text));
                    writer.WriteLine(string.Format("\tset_property IOSTANDARD LVCMOS33 [get_ports {0}]", name[i].Text));
                }
            }

            writer.WriteLine("\n");
        }

        private string DeterminePortName(int type, int idx)
        {
            //switch 0/LED 1/sevenseg 2/button 3/PMODA 4/PMODB 5/PMODC 6/PMODX 7
            switch (type)
            {
                case 0: return FPGAPortNames.sw[idx];
                case 1: return FPGAPortNames.led[idx];
                case 2: return FPGAPortNames.sevenseg[idx];
                case 3: return FPGAPortNames.btn[idx];
                case 4: return FPGAPortNames.pmodA[idx];
                case 5: return FPGAPortNames.pmodB[idx];
                case 6: return FPGAPortNames.pmodC[idx];
                case 7: return FPGAPortNames.pmodX[idx];
                default: return null;
            }
        }
    }

    public class FPGAPortNames
    {
        public static string clk = "W5";
        public static string[] sw = { "V17", "V16", "W16", "W17", "W15", "V15", "W14", "W13", "V2", "T3", "T2", "R3", "W2", "U1", "T1", "R2" };
        public static string[] led = { "U16", "E19", "U19", "V19", "W18", "U15", "U14", "V14", "V13", "V3", "W3", "U3", "P3", "N3", "P1", "L1" };
        public static string[] sevenseg = { "W7", "W6", "U8", "V8", "U5", "V5", "U7", "V7", "U2", "U4", "V4", "W4" };
        public static string[] btn = { "U18", "T18", "W19", "T17", "U17" };
        public static string[] pmodA = { "J1", "L2", "J2", "G2", "H1", "K2", "H2", "G3" };
        public static string[] pmodB = { "A14", "A16", "B15", "B16", "A15", "A17", "C15", "C16" };
        public static string[] pmodC = { "K17", "M18", "N17", "P18", "L17", "M19", "P17", "R18" };
        public static string[] pmodX = { "J3", "L3", "M2", "N2", "K3", "M3", "M1", "N1" };
        public static string[] vga = { "G19", "H19", "J19", "N19", "N18", "L18", "K18", "J18", "J17", "H17", "G17", "D17", "P19", "R19" };
        public static string[] serial = { "B18", "A18" };
        public static string[] hid = { "C17", "B17" };
        public static string[] spi = { "D18", "D19", "G18", "F18", "K19" };
    }

    public class EmptyArgumentException : Exception
    {
        public EmptyArgumentException(string message) :
            base(string.Format("Empty arguments such as name or bus address is detected at {0} interface.\nPlease correct the error and try again.", message))
        { }
    }

    public class InvalidArgumentException : Exception
    {
        public InvalidArgumentException(string message) : 
            base(string.Format("Invalid arguments is detected at {0} interface.\nPlease correct the error and try again.", message))
        { }
    }
}
